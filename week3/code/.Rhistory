MyData <- read.csv("../data/trees.csv", header = TRUE) # import with headers
MyData
write.csv(MyData, "../results/MyData.csv") #write it out as a new file
write.table(MyData[1,], file = "../results/MyData.csv",append=TRUE) # Append to it
write.csv(MyData, "../results/MyData.csv", row.names=TRUE) # write row names
write.table(MyData, "../results/MyData.csv", col.names=FALSE) # ignore column names
write.csv(MyData, "../results/MyData.csv") #write it out as a new file
source("basic_io.R")
a = TRUE
if (a == TRUE){
    print("a is TRUE")
} else{
    print("a is FLASE")
}
z = runif(1)
if (z <= 0.5) {print("Less than a halg")}
for(i in 1:10){
    j = i*i
    print(paste(i,"sqaured is", j))
}
for(species in c('Heliodoxa rubinoides', 
                 'Boissonneaua jardini', 
                 'Sula nebouxii')) {
      print(paste('The species is', species))
}
v1 = c("a", "bc", "def")
for (i in v1){
    print(i)
}
i = 0
while(i < 10){
    i = i+1
    print(i^2)
}
source control_flow.R
source control_flow.R
source control_flow.R
getwd()
source control_flow.R
source control_flow.R
install.packages('vscDebugger')
install.packages('https://github.com/ManuelHentschel/vscDebugger/files/9231784/vscDebugger_0.4.7.zip', repos = NULL, type = "win.binary")

install.packages("vscDebugger")
chooseCRANmirror()
install.packages("vscDebugger")
chooseCRANmirror()
install.packages("vscDebugger")
source control_flow.R
i = 0 #Initialize i
    while (i < Inf) {
        if (i == 10) {
            break 
        } else { # Break out of the while loop!  
            cat("i equals " , i , " \n")
            i <- i + 1 # Update i
    }
}
for (i in 1:10) {
  if ((i %% 2) == 0) # check if the number is odd
    next # pass to next iteration of loop 
  print(i)
}
source(control_flow.R)
getwd()
ls
ls()
source("control_flow.R")
source("boilerplate.R")
ls(pattern = "MyFun*")
class(MyFunction)
# Checks if an integer is even
is.even <- function(n = 2) {
  if (n %% 2 == 0) {
    return(paste(n,'is even!'))
  } else {
  return(paste(n,'is odd!'))
  }
}

is.even(6)
# Checks if a number is a power of 2
is.power2 <- function(n = 2) {
  if (log2(n) %% 1==0) {
    return(paste(n, 'is a power of 2!'))
  } else {
  return(paste(n,'is not a power of 2!'))
    }
}

is.power2(4)
# Checks if a number is prime
is.prime <- function(n) {
  if (n==0) {
    return(paste(n,'is a zero!'))
  } else if (n==1) {
    return(paste(n,'is just a unit!'))
  }
    
  ints <- 2:(n-1)
  
  if (all(n%%ints!=0)) {
    return(paste(n,'is a prime!'))
  } else {
  return(paste(n,'is a composite!'))
    }
}

is.prime(3)
# This function calculates heights of trees given distance of each tree 
# from its base and angle to its top, using  the trigonometric formula 
#
# height = distance * tan(radians)
#
# ARGUMENTS
# degrees:   The angle of elevation of tree
# distance:  The distance from base of tree (e.g., meters)
#
# OUTPUT
# The heights of the tree, same units as "distance"

TreeHeight <- function(degrees, distance) {
    radians <- degrees * pi / 180
    height <- distance * tan(radians)
    print(paste("Tree height is:", height))
  
    return (height)
}

TreeHeight(37, 40)
