plot(st_geometry(tapir_IUCN), add=TRUE, col='grey', border=NA)
plot(st_geometry(locs), add=TRUE, col='red', pch=4, cex=0.6)
plot(st_geometry(locs), add=TRUE, col='red', pch=4, cex=0.6)
locs
# convert to sf object
locs <- st_as_sf(locs, coords = c('lon','lat'), crs = 4326)
plot(st_geometry(locs), add=TRUE, col='red', pch=4, cex=0.6)
View(locs)
locs
# convert to sf object
locs <- st_as_sf(locs, coords = c('lon','lat'), crs = 4326)
locs
locs <- st_set_crs(locs, 4326)
st_crs(locs)
plot(st_geometry(locs), add=TRUE, col='red', pch=4, cex=0.6)
st_crs(tapir_IUCN)
st_crs(ne110)
st_crs(tapir_IUCN)
st_crs(locs)
print(st_bbox(tapir_IUCN))
print(st_bbox(locs))
bbox <- st_bbox(c(xmin = -79.622886, ymin = -5.962554, xmax = -73.823141, ymax = 5.031971), crs = 4326)
# 转换为多边形
bbox_poly <- st_as_sfc(bbox)
# 绘制范围
plot(bbox_poly, col = "lightblue", main = "Geographic Extent in WGS84")
model_extent <- extent(c(-80,-74,-6, 10))
plot(st_geometry(ne110), xlim=model_extent[1:2], ylim=model_extent[3:4],
bg='lightblue', col='ivory', axes=TRUE)
plot(st_geometry(tapir_IUCN), add=TRUE, col='grey', border=NA)
plot(st_geometry(locs), add=TRUE, col='red', pch=4, cex=0.6)
locs <- gbif('Tapirus', 'pinchaque')
locs <- subset(locs, ! is.na(lat) & ! is.na(lon))
# convert to sf object
locs <- st_as_sf(locs, coords = c('lon','lat'))
locs <- st_set_crs(locs, 4326)
# extract coords
coords <- st_coordinates(locs)
dups <- duplicated(coords)
locs <- locs[!dups, ]
# Load some (coarse) country background data
ne110 <- st_read('../data/practical_data/ne_110m_admin_0_countries/ne_110m_admin_0_countries.shp')
model_extent <- extent(c(-80,-74,-6, 10))
plot(st_geometry(ne110), xlim=model_extent[1:2], ylim=model_extent[3:4],
bg='lightblue', col='ivory', axes=TRUE)
model_extent <- extent(c(-20,55,-35, 37))
plot(st_geometry(ne110), xlim=model_extent[1:2], ylim=model_extent[3:4],
bg='lightblue', col='ivory', axes=TRUE)
plot(st_geometry(locs), add=TRUE, col='red', pch=4, cex=0.6)
locs <- gbif('Tapirus', 'pinchaque')
locs <- gbif('Lycaon', 'pictus')
locs <- st_as_sf(locs, coords = c('lon','lat'), crs = 4326)
locs <- subset(locs, ! is.na(lat) & ! is.na(lon))
# convert to sf object
locs <- st_as_sf(locs, coords = c('lon','lat'), crs = 4326)
locs <- st_set_crs(locs, 4326)
coords <- st_coordinates(locs)
dups <- duplicated(coords)
locs <- locs[!dups, ]
plot(st_geometry(locs), add=TRUE, col='red', pch=4, cex=0.6)
# import data
tapir_IUCN <- st_read('../data/sdm/MAMMALS_TERRESTRIAL_ONLY/MAMMALS_TERRESTRIAL_ONLY.shp')
# import data
tapir_IUCN <- st_read('../data/MAMMALS_TERRESTRIAL_ONLY/MAMMALS_TERRESTRIAL_ONLY.shp')
View(tapir_IUCN)
tapir_IUCN<- tapir_IUCN <- shapefile[tapir_IUCN$sci_name == "Lycaon pictus", ]
tapir_IUCN<-  shapefile[tapir_IUCN$sci_name == "Lycaon pictus", ]
tapir_IUCN <-  shapefile[tapir_IUCN$sci_name == "Lycaon pictus", ]
pictus_IUCN <-  tapir_IUCN[tapir_IUCN$sci_name == "Lycaon pictus", ]
print(tapir_IUCN)
print(pictus_IUCN)
plot(st_geometry(ne110), xlim=model_extent[1:2], ylim=model_extent[3:4],
bg='lightblue', col='ivory', axes=TRUE)
plot(st_geometry(pictus_IUCN), add=TRUE, col='grey', border=NA)
plot(st_geometry(locs), add=TRUE, col='red', pch=4, cex=0.6)
CANIDAE <- tapir_IUCN[tapir_IUCN$family == "CANIDAE", ]
View(CANIDAE)
write.csv(CANIDAE, file = "../data/CANIDAE.csv", row.names = FALSE)
st_write(CANIDAE, "../data/CANIDAE/CANIDAE.shp", delete_dsn = TRUE)
st_write(CANIDAE, "../data/CANIDAE/CANIDAE.shp", delete_dsn = TRUE)
CANIDAE <- tapir_IUCN[tapir_IUCN$family == "CANIDAE", ]
st_write(CANIDAE, "../data/CANIDAE/CANIDAE.shp", delete_dsn = TRUE)
st_write(CANIDAE, "../data/CANIDAE/CANIDAE.shp", delete_dsn = TRUE)
CANIDAE_IUCN <- st_read('../data/CANIDAE/CANIDAE.shp')
pictus_IUCN <-  CANIDAE_IUCN[CANIDAE_IUCN$sci_name == "Lycaon pictus", ]
plot(st_geometry(pictus_IUCN), add=TRUE, col='grey', border=NA)
plot(st_geometry(locs), add=TRUE, col='red', pch=4, cex=0.6)
unique(CANIDAE$sci_name)
selected_species <- c("Canis lupaster", "Lupulella adustus", "Lupulella mesomelas",
"Otocyon megalotis", "Vulpes chama")
selected_data <- CANIDAE %>%
filter(sci_name %in% selected_species)
selected_data <- CANIDAE %>%
filter(sci_name %in% selected_species)
overlap <- st_intersection(selected_data, lycaon)
lycaon <- CANIDAE %>%
filter(sci_name == "Lycaon pictus")
selected_data <- CANIDAE %>%
filter(sci_name %in% selected_species)
overlap <- st_intersection(selected_data, lycaon)
overlap <- overlap %>%
mutate(overlap_area = st_area(geometry))
overlap
overlap_ratios <- overlap %>%
group_by(sci_name) %>%
summarise(
total_area = sum(st_area(selected_data$geometry)),
overlap_area = sum(overlap_area),
overlap_ratio = as.numeric(overlap_area / total_area)
)
print(overlap_ratios)
selected_data <- selected_data %>%
mutate(color = as.factor(sci_name))
ggplot() +
geom_sf(data = selected_data, aes(fill = sci_name), color = "black", alpha = 0.6) +
scale_fill_manual(values = rainbow(length(unique(selected_data$sci_name)))) +
theme_minimal() +
labs(fill = "Species", title = "Distribution of Selected Species")
# intersaction
selected_species <- c("Canis lupaster", 'Canis simensis', "Lupulella adustus", "Lupulella mesomelas",
"Otocyon megalotis", "Vulpes chama")
lycaon <- CANIDAE %>%
filter(sci_name == "Lycaon pictus")
selected_data <- CANIDAE %>%
filter(sci_name %in% selected_species)
overlap <- st_intersection(selected_data, lycaon)
overlap <- overlap %>%
mutate(overlap_area = st_area(geometry))
overlap_ratios <- overlap %>%
group_by(sci_name) %>%
summarise(
total_area = sum(st_area(selected_data$geometry)),
overlap_area = sum(overlap_area),
overlap_ratio = as.numeric(overlap_area / total_area)
)
print(overlap_ratios)
selected_data <- selected_data %>%
mutate(color = as.factor(sci_name))
ggplot() +
geom_sf(data = selected_data, aes(fill = sci_name), color = "black", alpha = 0.6) +
scale_fill_manual(values = rainbow(length(unique(selected_data$sci_name)))) +
theme_minimal() +
labs(fill = "Species", title = "Distribution of Selected Species")
for (species in selected_species) {
# 筛选单个物种
species_data <- related_species[related_species$sci_name == species, ]
# 绘图
p <- ggplot() +
geom_sf(data = st_geometry(lycaon), fill = "red", alpha = 0.5, color = "black") +
geom_sf(data = st_geometry(species_data), fill = "blue", alpha = 0.5, color = "black") +
theme_minimal() +
ggtitle(paste("Distribution of Lycaon pictus and", species)) +
labs(fill = "Species")
# 显示图
print(p)
}
for (species in selected_species) {
# 筛选单个物种
species_data <- selected_species[selected_species$sci_name == species, ]
# 绘图
p <- ggplot() +
geom_sf(data = st_geometry(lycaon), fill = "red", alpha = 0.5, color = "black") +
geom_sf(data = st_geometry(species_data), fill = "blue", alpha = 0.5, color = "black") +
theme_minimal() +
ggtitle(paste("Distribution of Lycaon pictus and", species)) +
labs(fill = "Species")
# 显示图
print(p)
}
selected_data
for (species in selected_species) {
# 筛选单个物种
species_data <- selected_data[selected_data$sci_name == species, ]
# 绘图
p <- ggplot() +
geom_sf(data = st_geometry(lycaon), fill = "red", alpha = 0.5, color = "black") +
geom_sf(data = st_geometry(species_data), fill = "blue", alpha = 0.5, color = "black") +
theme_minimal() +
ggtitle(paste("Distribution of Lycaon pictus and", species)) +
labs(fill = "Species")
# 显示图
print(p)
}
print(overlap_ratios)
plot(st_geometry(ne110), xlim=model_extent[1:2], ylim=model_extent[3:4],
bg='lightblue', col='ivory', axes=TRUE)
plot(st_geometry(ne110), xlim=model_extent[1:2], ylim=model_extent[3:4],
bg='lightblue', col='ivory', axes=TRUE)
for (species in selected_species) {
# 筛选单个物种
species_data <- selected_data[selected_data$sci_name == species, ]
# 绘图
p <- ggplot() +
geom_sf(data = africa, fill = "lightgrey", color = "black", alpha = 0.5) +
geom_sf(data = st_geometry(lycaon), fill = "red", alpha = 0.5, color = "black") +
geom_sf(data = st_geometry(species_data), fill = "blue", alpha = 0.5, color = "black") +
theme_minimal() +
ggtitle(paste("Distribution of Lycaon pictus and", species)) +
labs(fill = "Species")
plot(st_geometry(ne110), xlim=model_extent[1:2], ylim=model_extent[3:4],
bg='lightblue', col='ivory', axes=TRUE)
for (species in selected_species) {
# 筛选单个物种
species_data <- selected_data[selected_data$sci_name == species, ]
# 绘图
p <- ggplot() +
geom_sf(data = africa, fill = "lightgrey", color = "black", alpha = 0.5) +
geom_sf(data = st_geometry(lycaon), fill = "red", alpha = 0.5, color = "black") +
geom_sf(data = st_geometry(species_data), fill = "blue", alpha = 0.5, color = "black") +
theme_minimal() +
ggtitle(paste("Distribution of Lycaon pictus and", species)) +
labs(fill = "Species")
# 显示图
print(p)
}
for (species in selected_species) {
# 筛选单个物种
species_data <- selected_data[selected_data$sci_name == species, ]
# 绘图
p <- ggplot() +
geom_sf(data = africa, fill = "lightgrey", color = "black", alpha = 0.5) +
geom_sf(data = st_geometry(lycaon), fill = "red", alpha = 0.5, color = "black") +
geom_sf(data = st_geometry(species_data), fill = "blue", alpha = 0.5, color = "black") +
theme_minimal() +
ggtitle(paste("Distribution of Lycaon pictus and", species)) +
labs(fill = "Species")
# 显示图
print(p)
}
selected_data <- selected_data %>%
mutate(color = as.factor(sci_name))
for (species in selected_species) {
# 筛选单个物种
species_data <- selected_data[selected_data$sci_name == species, ]
# 绘图
p <- ggplot() +
geom_sf(data = africa, fill = "lightgrey", color = "black", alpha = 0.5) +
geom_sf(data = st_geometry(lycaon), fill = "red", alpha = 0.5, color = "black") +
geom_sf(data = st_geometry(species_data), fill = "blue", alpha = 0.5, color = "black") +
theme_minimal() +
ggtitle(paste("Distribution of Lycaon pictus and", species)) +
labs(fill = "Species")
# 显示图
print(p)
}
for (species in selected_species) {
species_data <- selected_data[selected_data$sci_name == species, ]
p <- ggplot() +
geom_sf(data = africa, fill = "lightgrey", color = "black", alpha = 0.5) +
geom_sf(data = st_geometry(lycaon), fill = "red", alpha = 0.5, color = "black") +
geom_sf(data = st_geometry(species_data), fill = "blue", alpha = 0.5, color = "black") +
theme_minimal() +
ggtitle(paste("Distribution of Lycaon pictus and", species)) +
labs(fill = "Species")
print(p)
}
library(dismo)
library(sf)
library(dplyr)
library(CoordinateCleaner)
library(ggplot2)
# Check the species without downloading - this shows the number of records
locs <- gbif('Lycaon', 'pictus')
locs <- subset(locs, ! is.na(lat) & ! is.na(lon))
# convert to sf object
locs <- st_as_sf(locs, coords = c('lon','lat'))
locs <- st_set_crs(locs, 4326)
# extract coords
coords <- st_coordinates(locs)
dups <- duplicated(coords)
locs <- locs[!dups, ]
# import data
CANIDAE_IUCN <- st_read('../data/CANIDAE/CANIDAE.shp')
pictus_IUCN <-  CANIDAE_IUCN[CANIDAE_IUCN$sci_name == "Lycaon pictus", ]
# Load some (coarse) country background data
ne110 <- st_read('../data/practical_data/ne_110m_admin_0_countries/ne_110m_admin_0_countries.shp')
model_extent <- extent(c(-20,55,-35, 37))
plot(st_geometry(ne110), xlim=model_extent[1:2], ylim=model_extent[3:4],
bg='lightblue', col='ivory', axes=TRUE)
plot(st_geometry(pictus_IUCN), add=TRUE, col='grey', border=NA)
plot(st_geometry(locs), add=TRUE, col='red', pch=4, cex=0.6)
# intersaction
selected_species <- c("Canis lupaster", 'Canis simensis', "Lupulella adustus", "Lupulella mesomelas",
"Otocyon megalotis", "Vulpes chama")
lycaon <- CANIDAE %>%
filter(sci_name == "Lycaon pictus")
lycaon <- CANIDAE_IUCN  %>%
filter(sci_name == "Lycaon pictus")
selected_data <- CANIDAE %>%
filter(sci_name %in% selected_species)
lycaon <- CANIDAE_IUCN  %>%
filter(sci_name == "Lycaon pictus")
selected_data <- CANIDAE_IUCN  %>%
filter(sci_name %in% selected_species)
overlap <- st_intersection(selected_data, lycaon)
overlap <- overlap %>%
mutate(overlap_area = st_area(geometry))
overlap_ratios <- overlap %>%
group_by(sci_name) %>%
summarise(
total_area = sum(st_area(selected_data$geometry)),
overlap_area = sum(overlap_area),
overlap_ratio = as.numeric(overlap_area / total_area)
)
print(overlap_ratios)
selected_data <- selected_data %>%
mutate(color = as.factor(sci_name))
for (species in selected_species) {
species_data <- selected_data[selected_data$sci_name == species, ]
p <- ggplot() +
geom_sf(data = africa, fill = "lightgrey", color = "black", alpha = 0.5) +
geom_sf(data = st_geometry(lycaon), fill = "red", alpha = 0.5, color = "black") +
geom_sf(data = st_geometry(species_data), fill = "blue", alpha = 0.5, color = "black") +
theme_minimal() +
ggtitle(paste("Distribution of Lycaon pictus and", species)) +
labs(fill = "Species")
print(p)
}
africa_bbox <- st_as_sfc(st_bbox(c(xmin = -20, xmax = 55, ymin = -35, ymax = 37), crs = st_crs(ne110)))
africa <- st_intersection(ne110, africa_bbox)
africa <- st_intersection(ne110, africa_bbox)
africa <- mask(ne110, africa_bbox)
africa_bbox <- st_as_sfc(st_bbox(c(xmin = -20, xmax = 55, ymin = -35, ymax = 37), crs = st_crs(ne110)))
africa <- mask(ne110, africa_bbox)
# define africa
africa <- st_crop(ne110, st_bbox(africa_bbox))
# define africa
ne110_valid <- st_make_valid(ne110)
africa <- st_crop(ne110, st_bbox(africa_bbox))
# define africa
# 定义非洲边界框
africa_bbox <- st_as_sfc(st_bbox(c(xmin = -20, xmax = 55, ymin = -35, ymax = 37), crs = st_crs(ne110)))
africa <- st_intersection(ne110, africa_bbox)
ne110_valid <- st_make_valid(ne110)
africa <- st_intersection(ne110_valid, africa_bbox)
invalid_geometries <- ne110_valid[!st_is_valid(ne110_valid), ]
print(invalid_geometries)
africa <- st_intersection(ne110_clean, africa_bbox)
ne110_clean <- ne110_valid[st_is_valid(ne110_valid), ]
africa <- st_intersection(ne110_clean, africa_bbox)
for (species in selected_species) {
species_data <- selected_data[selected_data$sci_name == species, ]
p <- ggplot() +
geom_sf(data = africa, fill = "lightgrey", color = "black", alpha = 0.5) +
geom_sf(data = st_geometry(lycaon), fill = "red", alpha = 0.5, color = "black") +
geom_sf(data = st_geometry(species_data), fill = "blue", alpha = 0.5, color = "black") +
theme_minimal() +
ggtitle(paste("Distribution of Lycaon pictus and", species)) +
labs(fill = "Species")
print(p)
}
setwd("/home/ruizao/Documents/CMEECourseWork/week4/code")
rm(list=ls())
library(ggplot2)
load("../data/KeyWestAnnualMeanTemperature.RData")
ls()
class(ats)
head(ats)
# Plot data
p <- ggplot(data=ats, aes(x = Year, y = Temp)) +
geom_point(shape = 1) +
stat_smooth(method="lm", se=FALSE, colour = "red") +
labs(x = "Year", y = "Temperature") +
theme_classic()
plot(p)
ggsave("../results/plot.png", plot = p, width = 8, height = 6, dpi = 300)
# Compute the appropriate correlation coefficient between years and Temperature
correlation_origin = cor(ats$Year, ats$Temp)
correlation_origin
# generate 1000 shuffles
set.seed(123)
n_shuffles <- 1000
# Store correlations
correlations_permuted <- numeric(n_shuffles)
# Repeat the calculation n_shuffles times
for (i in 1:n_shuffles) {
shuffled_temps <- sample(ats$Temp)
correlations_permuted[i] <- cor(ats$Year, shuffled_temps)
}
# Print the first few correlations to check
print(head(correlations_permuted))
p_value <- mean(correlations_permuted >= correlation_origin)
# Print the p-value
print(paste("P-value from permutation analysis:", p_value))
# visualization
png("../results/histogram_plot.png", width = 1000, height = 800, res = 100)
hist(correlations_permuted, breaks = 30, main = "",
xlab = "Correlation Coefficient", col = "lightblue", border = "black",
xlim = c(-1, 1))
abline(v = correlation_origin, col = "red", lwd = 2)
legend("topright", legend = "Original Correlation", col = "red", lwd = 2)
# Close the device to save the file
dev.off()
p <- ggplot(data.frame(correlation = correlations_permuted), aes(x = correlation)) +
geom_histogram(bins = 30, fill = "lightblue", color = "black") +
geom_vline(xintercept = correlation_origin, color = "red", size = 1) +
labs(x = "Correlation Coefficient", y = "Frequency", title = "") +
theme_minimal() +
theme(plot.title = element_blank()) +
annotate("text", x = correlation_origin, y = max(table(cut(correlations_permuted, breaks = 30))) * 0.8,
label = "Original Correlation", color = "red", hjust = -0.2)
ggsave("../results/histogram_plot.png", plot = p, width = 10, height = 8, dpi = 100)
print(p)
p <- ggplot(data.frame(correlation = correlations_permuted), aes(x = correlation)) +
geom_histogram(bins = 30, fill = "#69b3a2", color = "white", alpha = 0.9) +
geom_vline(xintercept = correlation_origin, color = "#e63946", size = 1.2, linetype = "dashed") +
labs(
x = "Correlation Coefficient",
y = "Frequency",
title = "Histogram of Permuted Correlations",
subtitle = "Highlighting the Original Correlation Coefficient"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.title = element_text(face = "bold"),
panel.grid.minor = element_blank()
) +
annotate(
"text",
x = correlation_origin,
y = max(table(cut(correlations_permuted, breaks = 30))) * 0.9,
label = "Original Correlation",
color = "#e63946",
fontface = "bold",
size = 4,
hjust = -0.1
)
ggsave("../results/histogram_plot.png", plot = p, width = 10, height = 8, dpi = 100)
h <- ggplot(as.data.frame(perm_corr), aes(x=perm_corr)) +
geom_histogram(colour="white", fill="blue") +
geom_vline(xintercept = obs_corr, colour = "red", size=1) +
labs(x="Correlation Coefficient", y="Frequency") +
xlim(-0.35,0.35) +
theme_classic()
h <- ggplot(as.data.frame(correlations_permuted), aes(x=correlations_permuted)) +
geom_histogram(colour="white", fill="blue") +
geom_vline(xintercept = correlation_origin, colour = "red", size=1) +
labs(x="Correlation Coefficient", y="Frequency") +
xlim(-0.35,0.35) +
theme_classic()
ggsave("../results/histogram_plot.png", plot = h, width = 10, height = 8, dpi = 100)
h <- ggplot(as.data.frame(correlations_permuted), aes(x=correlations_permuted)) +
geom_histogram(colour="white", fill="blue") +
geom_vline(xintercept = correlation_origin, colour = "red", size=1) +
labs(x="Correlation Coefficient", y="Frequency") +
xlim(-0.5,0.6) +
theme_classic()
ggsave("../results/histogram_plot.png", plot = h, width = 10, height = 8, dpi = 100)
range(correlations_permuted)
h <- ggplot(as.data.frame(correlations_permuted), aes(x=correlations_permuted)) +
geom_histogram(colour="white", fill="blue") +
geom_vline(xintercept = correlation_origin, colour = "red", size=1) +
labs(x="Correlation Coefficient", y="Frequency") +
xlim(-0.6,0.6) +
theme_classic()
ggsave("../results/histogram_plot.png", plot = h, width = 10, height = 8, dpi = 100)
h <- ggplot(as.data.frame(correlations_permuted), aes(x=correlations_permuted)) +
geom_histogram(colour="white", fill="blue") +
geom_vline(xintercept = correlation_origin, colour = "red", size=1) +
labs(x="Correlation Coefficient", y="Frequency") +
xlim(-1,0.6) +
theme_classic()
ggsave("../results/histogram_plot.png", plot = h, width = 10, height = 8, dpi = 100)
h <- ggplot(as.data.frame(correlations_permuted), aes(x=correlations_permuted)) +
geom_histogram(colour="white", fill="blue") +
geom_vline(xintercept = correlation_origin, colour = "red", size=1) +
labs(x="Correlation Coefficient", y="Frequency") +
xlim(-1,1) +
theme_classic()
ggsave("../results/histogram_plot.png", plot = h, width = 10, height = 8, dpi = 100)
h <- ggplot(as.data.frame(correlations_permuted), aes(x=correlations_permuted)) +
geom_histogram(colour="white", fill="blue") +
geom_vline(xintercept = correlation_origin, colour = "red", size=1) +
labs(x="Correlation Coefficient", y="Frequency") +
xlim(-0.4,0.6) +
theme_classic()
ggsave("../results/histogram_plot.png", plot = h, width = 10, height = 8, dpi = 100)
h <- ggplot(as.data.frame(correlations_permuted), aes(x=correlations_permuted)) +
geom_histogram(colour="white", fill="blue") +
geom_vline(xintercept = correlation_origin, colour = "red", size=1) +
labs(x="Correlation Coefficient", y="Frequency") +
xlim(-0.4,0.6) +
theme_classic() +
theme(
axis.title.x = element_text(face = "bold", size = 14),
axis.title.y = element_text(face = "italic", size = 14)
)
ggsave("../results/histogram_plot.png", plot = h, width = 10, height = 8, dpi = 100)
h <- ggplot(as.data.frame(correlations_permuted), aes(x=correlations_permuted)) +
geom_histogram(colour="white", fill="blue") +
geom_vline(xintercept = correlation_origin, colour = "red", size=1) +
labs(x="Correlation Coefficient", y="Frequency") +
xlim(-0.4,0.6) +
theme_classic() +
theme(
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)
)
ggsave("../results/histogram_plot.png", plot = h, width = 10, height = 8, dpi = 100)
h <- ggplot(as.data.frame(correlations_permuted), aes(x=correlations_permuted)) +
geom_histogram(colour="white", fill="blue") +
geom_vline(xintercept = correlation_origin, colour = "red", size=1) +
labs(x="Correlation Coefficient", y="Frequency") +
xlim(-0.4,0.6) +
theme_classic() +
theme(
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)
)
ggsave("../results/histogram_plot.png", plot = h, width = 8, height = 6, dpi = 100)
